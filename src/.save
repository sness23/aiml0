const express = require('express');
const { OpenAI } = require('openai');
const { config } = require('dotenv');

config({ path: '.env.local' });

if (!process.env.AIML_API_KEY) {
    throw new Error('AIML_API_KEY is not defined in the .env.local file');
}

const api = new OpenAI({
    apiKey: process.env.AIML_API_KEY,
    baseURL: 'https://api.aimlapi.com/v1',
});

const app = express();
const PORT = 4000;

app.use(express.json());

app.use(express.static('public'));

async function doCompletion(message) {
    const completion = await api.chat.completions.create({
        model: "meta-llama/Llama-3.2-3B-Instruct-Turbo",
        messages: [
            {
                role: 'user',
                content: message,
            },
        ],
        temperature: 0.7
    });

    console.log(completion);

    const in_responseContent = completion.choices[0].message.content;

    console.log("in_responseContent=",in_responseContent);
    
    return in_responseContent;
}


app.post('/message', async (req, res) => {
    let in_message = req.body.message;
    let pre_message = in_message.substring(1);
    let sequence = in_message.charAt(0);

    let message = pre_message;

    if (sequence == "0") {
        message = "Please give a detailed overview in a conversational style for an expert scientist of the cancer IDH-wildtype glioblastoma";
    }

    console.log("message=",message);
    
    if (message) {
        try {
            const in_responseContent = doCompletion(message);
            
            if (sequence == "0") {
                responseContent = in_responseContent + "<br><br>" + "The next step will be to do a literature search for this cancer.  I will use Pubmed Central for this step.  Please press enter if that's OK";
            }

            res.json({ success: true, response: responseContent });
        } catch (error) {
            console.error('Error during chat request:', error);
            res.status(500).json({ success: false, error: 'Internal server error' });
        }
    } else {
        res.status(400).json({ success: false, error: 'No message provided' });
    }
});

app.listen(PORT, () => {
    console.log(`Server is running at http://localhost:${PORT}`);
});
